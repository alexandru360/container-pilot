# Container Pilot - Unified CI/CD Pipeline
# Single workflow cu stage-uri secvențiale: Build → Test → Docker Publish

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # STAGE 1: BUILD
  # ==========================================
  build:
    name: 🔨 Build (Frontend + Backend)
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      # ----- Backend Build -----
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: 📦 Restore .NET dependencies
        run: dotnet restore ContainerPilot.sln
        working-directory: ./src/ContainerPilot.Server
      
      - name: 🔨 Build .NET project
        run: dotnet build ContainerPilot.sln -c Release --no-restore
        working-directory: ./src/ContainerPilot.Server
      
      - name: 📤 Publish .NET project
        run: dotnet publish ContainerPilot.Server.csproj -c Release -o ./bin/Release/net8.0/publish --no-build
        working-directory: ./src/ContainerPilot.Server
      
      # ----- Frontend Build -----
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './src/ContainerPilot.Server/src/ContainerPilot.Web.Client/package-lock.json'
      
      - name: 📦 Install frontend dependencies
        run: npm ci
        working-directory: ./src/ContainerPilot.Server/src/ContainerPilot.Web.Client
      
      - name: 🔨 Build frontend
        run: npm run build
        working-directory: ./src/ContainerPilot.Server/src/ContainerPilot.Web.Client
      
      # ----- Combine Frontend + Backend -----
      - name: 📁 Copy frontend to wwwroot
        run: |
          mkdir -p ./src/ContainerPilot.Server/bin/Release/net8.0/publish/wwwroot
          cp -r ./src/ContainerPilot.Server/src/ContainerPilot.Server.Client/dist/* ./src/ContainerPilot.Server/bin/Release/net8.0/publish/wwwroot/
      
      # ----- Upload artifacts pentru stage-urile următoare -----
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./src/ContainerPilot.Server/bin/Release/net8.0/publish/
          retention-days: 1
      
      - name: ✅ Build completed
        run: echo "✓ Build stage completed successfully"

  # ==========================================
  # STAGE 2: TEST
  # ==========================================
  test:
    name: 🧪 Test (Unit + Integration)
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: 📦 Restore dependencies
        run: dotnet restore
        working-directory: ./src/ContainerPilot.Server
      
      # Placeholder pentru teste viitoare
      - name: 🧪 Run unit tests
        run: |
          echo "✓ Unit tests placeholder"
          # dotnet test --no-restore --verbosity normal
        working-directory: ./src/ContainerPilot.Server
      
      - name: 🔍 Code quality check
        run: |
          echo "✓ Code quality checks placeholder"
          # dotnet format --verify-no-changes
      
      - name: ✅ Tests completed
        run: echo "✓ Test stage completed successfully"

  # ==========================================
  # STAGE 3: DOCKER BUILD & PUBLISH
  # ==========================================
  docker:
    name: 🐳 Docker (Build & Publish)
    runs-on: ubuntu-latest
    needs: [build, test]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./publish
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.podman
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: ✅ Docker published
        run: |
          echo "✓ Docker stage completed successfully"
          echo "📦 Published images:"
          echo "${{ steps.meta.outputs.tags }}"

  # ==========================================
  # STAGE 4: DEPLOY (Optional - doar pe tag-uri)
  # ==========================================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 🚀 Deploy notification
        run: |
          echo "🚀 Deployment triggered for ${{ github.ref_name }}"
          echo "Add your deployment steps here (Unraid, K8s, etc.)"
      
      - name: 📢 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          body: |
            ## 🎉 Container Pilot ${{ github.ref_name }}
            
            ### 🐳 Docker Images
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
            
            ### 📦 Podman
            ```bash
            podman pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

  # ==========================================
  # PIPELINE SUMMARY
  # ==========================================
  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build, test, docker]
    if: always()
    
    steps:
      - name: 📊 Pipeline status
        run: |
          echo "=================================="
          echo "Container Pilot CI/CD Pipeline"
          echo "=================================="
          echo "Build:  ${{ needs.build.result }}"
          echo "Test:   ${{ needs.test.result }}"
          echo "Docker: ${{ needs.docker.result }}"
          echo "=================================="
          
          if [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.docker.result }}" != "success" ]; then
            echo "❌ Pipeline FAILED"
            exit 1
          else
            echo "✅ Pipeline SUCCESSFUL"
          fi
